# Rail Fence Cipher

.data
	buffer: 	.space 	20
	string_prompt: 	.asciiz "\nEnter plaintext: \n"
	rail_prompt:	.asciiz "\nEnter rail count: \n"
.text

	la $a0, string_prompt	# print plaintext prompt
	li $v0, 4
	syscall

	la $a0, buffer			# get plaintext
	li $a1, 20
	li $v0, 8
	syscall
	
	move $s0, $a0 			# put plaintext in $s0
	

	la $a0, rail_prompt	# print shift prompt
	li $v0, 4
	syscall

	la $v0, 5				# get rail count
	syscall
	
	move $s1, $v0 			# put rail count in $s1, this is the row count
	
	add $t0, $zero, $zero 	# loop counter in $t0

Count_Plaintext:
    add $t1, $s0, $t0
    lb $t2, ($t1)
    beq  $t2, 0, Create_Rail_Fence
	addi $t0, $t0, 1		# increment counter
	j Count_Plaintext

Dec_Row_Count:
	addi $t1, $t1, -1		# decrement row count
	j Loop

Inc_Row_Count:	
	addi $t1, $t1, 1		# increment row count
	j Loop

Flip_Row_Inc:
	li $t5, 1
	j Inc_Row_Count

Flip_Row_Dec:
	li $t5, 0
	j Dec_Row_Count

Create_Rail_Fence:
	addi $t0, $t0, -1 		# take one off length to account for null character
	move $s2, $t0			# store plaintext length in $s2, this is the column count
	li $t0, 0				# reset loop counter

	li $t3, 1				# byte count of each cell in 2D array
	mult $s1, $s2			# multiply array dimensions row/column
	mflo $a0
	mult $a0, $t3			# assign byte counts
	li $v0, 9				# allocate heap memory for array
	syscall
	move $s3, $v0			# store array address in $s3

	add $t1, $zero, $zero	# initialize row counter
	add $t5, $zero, $zero	# initialize row state, 1 is increment, 0 is decrement

Loop:
	add $t2, $s0, $t0		# $t2 = address of current byte = starting location + loop/column counter
	lb $t3, ($t2)					# load current byte of input into $t3
	beq $t3, 0, Reset_Counter		# if we reached null characters, quit looping and print array

	# Store in column major order in array at $s3
	# array address = row + (col * numrows)
	# $t4 = $t1 + ($t0 * $s1)

	mult $t0, $s1				# multiply current column num by total number of rows
	mflo $t4					# move result to $t4
	add $t4, $t4, $t1			# add row count to $t4
	add $t4, $s3, $t4			# $t4 = address in array for current character
	sb $t3, ($t4)				# store current byte in array address

	addi $t0, $t0, 1			# increment column counter
	beq $t1, $s1, Flip_Row_Dec	# reached bottom row
	beq $t1, 0, Flip_Row_Inc	# reached top row
	beq $t5, 0, Dec_Row_Count	# if decreasing, decrement
	beq $t5, 1, Inc_Row_Count	# if increasing, increment

	j Loop 						# iterate to next character	

Add_Random:
	li $a1, 128					# upper bound of random 
	li $v0, 42					# random int with upper bound
	syscall
	sb $a0, ($t1)

Loop_Array:
	add $t1, $s3, $t0			# $t1 = address of current byte in array
	lb $t2, ($t1)				# load current byte from array into $t2
	beq $t2, 0, Add_Random 	
	bgt $t0, $t4, Reset_Print
	add $t0, $t0, 1				# increment iterator
	j Loop_Array

Reset_Counter:
	add $t0, $zero, $zero			# reset loop counter
	mult $s1, $s2
	mflo $t4						# total length of array
	j Loop_Array

Reset_Print:
	add $t0, $zero, $zero			# reset loop counter

Print:
	add $t1, $s3, $t0
	lb $t2, ($t1)
	bgt $t0, $t4, Exit			# if null, exit

	la $a0, ($t2)				# put shifted byte into $a0
	li $v0, 11					# print $a0
	syscall

	add $t0, $t0, 1			# increment iterator
	j Print

Exit:
	li $v0, 10
	syscall